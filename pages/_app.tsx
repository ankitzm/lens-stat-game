import '../styles/globals.css';
import '@rainbow-me/rainbowkit/styles.css';
import Head from 'next/head';
import { getDefaultWallets, RainbowKitProvider, ConnectButton } from '@rainbow-me/rainbowkit';
import type { AppProps } from 'next/app';
import { configureChains, createConfig, useAccount, useSignMessage, WagmiConfig } from 'wagmi';
import {
  arbitrum,
  goerli,
  mainnet,
  optimism,
  polygon,
  base,
  zora,
} from 'wagmi/chains';
import { publicProvider } from 'wagmi/providers/public';
import { authenticate, generateChallenge } from './../utils/utils';
import { useState } from 'react';

const { chains, publicClient, webSocketPublicClient } = configureChains(
  [
    mainnet,
    polygon,
    optimism,
    arbitrum,
    base,
    zora,
    ...(process.env.NEXT_PUBLIC_ENABLE_TESTNETS === 'true' ? [goerli] : []),
  ],
  [publicProvider()]
);

const { connectors } = getDefaultWallets({
  appName: 'RainbowKit App',
  projectId: 'YOUR_PROJECT_ID',
  chains,
});

const wagmiConfig = createConfig({
  autoConnect: true,
  connectors,
  publicClient,
  webSocketPublicClient,
});


function MyApp({ Component, pageProps }: AppProps) {

  // const { data } = useAccount();
  // const address = data?.address;
  // const connected = !!data?.address;
  // const { signMessageAsync } = useSignMessage();
  // const [signedIn, setSignedIn] = useState(false);

  // const signIn = async () => {
  //   try {
  //     if (!connected) {
  //       return alert('Please connect your wallet first');
  //     }
  //     const challenge = await generateChallenge(address);
  //     const signature = await signMessageAsync({ message: challenge });
  //     const accessToken = await authenticate(address, signature);
  //     console.log({ accessToken });
  //     window.sessionStorage.setItem('accessToken', accessToken);
  //     setSignedIn(true);
  //   } catch (error) {
  //     console.error(error);
  //     alert('Error signing in');
  //   }
  // };

  return (
    <WagmiConfig config={wagmiConfig}>
      <RainbowKitProvider chains={chains}>
        <Head>
          <title>PvP Stats Game</title>
          <meta
            content="Generated by @rainbow-me/create-rainbowkit"
            name="description"
          />
          <link href="/favicon.ico" rel="icon" />
        </Head>

        <main className="flex flex-col items-center justify-center">
          <div className="mt-16 z-10 w-full max-w-5xl items-center justify-between font-mono text-sm lg:flex">
            <p className="fixed left-0 top-0 flex w-full justify-center  border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30">
              game name
            </p>
            <div className="fixed bottom-0 pb-4 lg:pb-0 left-0 flex h-32 w-full items-end justify-center bg-gradient-to-t from-white via-white dark:from-black dark:via-black lg:static lg:h-auto lg:w-auto lg:bg-none">
              <ConnectButton />
            </div>
          </div>
          <Component {...pageProps} />
        </main>
      </RainbowKitProvider>
    </WagmiConfig>
  );
}

export default MyApp;
